CREATE TABLE IF NOT EXISTS UM_DOMAIN(
    UM_DOMAIN_ID   INTEGER      NOT NULL AUTO_INCREMENT,
    UM_DOMAIN_NAME VARCHAR(255) NOT NULL,
    UM_TENANT_ID   INTEGER DEFAULT 0,
    PRIMARY KEY (UM_DOMAIN_ID, UM_TENANT_ID),
    UNIQUE (UM_DOMAIN_NAME, UM_TENANT_ID)
);

CREATE TABLE IF NOT EXISTS UM_HYBRID_ROLE_AUDIENCE(
            ID INTEGER NOT NULL AUTO_INCREMENT,
            AUDIENCE VARCHAR(255) NOT NULL,
            AUDIENCE_ID VARCHAR(255) NOT NULL,
            UNIQUE (AUDIENCE, AUDIENCE_ID),
            PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS UM_HYBRID_ROLE(
            UM_ID INTEGER NOT NULL AUTO_INCREMENT,
            UM_ROLE_NAME VARCHAR(255) NOT NULL,
            UM_TENANT_ID INTEGER DEFAULT 0,
            AUDIENCE_ID INTEGER,
            PRIMARY KEY (UM_ID, UM_TENANT_ID),
            UNIQUE (UM_ROLE_NAME, UM_TENANT_ID),
            FOREIGN KEY(AUDIENCE_ID) REFERENCES UM_HYBRID_ROLE_AUDIENCE(ID)
);

CREATE INDEX IF NOT EXISTS UM_ROLE_NAME_IND ON UM_HYBRID_ROLE(UM_ROLE_NAME);

CREATE TABLE IF NOT EXISTS UM_HYBRID_USER_ROLE(
    UM_ID INTEGER NOT NULL AUTO_INCREMENT,
    UM_USER_NAME VARCHAR(255),
    UM_ROLE_ID INTEGER NOT NULL,
    UM_TENANT_ID INTEGER DEFAULT 0,
    UM_DOMAIN_ID INTEGER,
    UNIQUE (UM_USER_NAME, UM_ROLE_ID, UM_TENANT_ID,UM_DOMAIN_ID),
    FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID) REFERENCES UM_HYBRID_ROLE(UM_ID, UM_TENANT_ID) ON DELETE CASCADE,
    FOREIGN KEY (UM_DOMAIN_ID, UM_TENANT_ID) REFERENCES UM_DOMAIN(UM_DOMAIN_ID, UM_TENANT_ID) ON DELETE CASCADE,
    PRIMARY KEY (UM_ID, UM_TENANT_ID)
);

CREATE TABLE IF NOT EXISTS UM_HYBRID_GROUP_ROLE(
    UM_ID        INTEGER NOT NULL AUTO_INCREMENT,
    UM_GROUP_NAME VARCHAR(255),
    UM_ROLE_ID   INTEGER NOT NULL,
    UM_TENANT_ID INTEGER DEFAULT 0,
    UM_DOMAIN_ID INTEGER,
    UNIQUE (UM_GROUP_NAME, UM_ROLE_ID, UM_TENANT_ID, UM_DOMAIN_ID),
    FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID) REFERENCES UM_HYBRID_ROLE (UM_ID, UM_TENANT_ID) ON DELETE CASCADE,
    FOREIGN KEY (UM_DOMAIN_ID, UM_TENANT_ID) REFERENCES UM_DOMAIN (UM_DOMAIN_ID, UM_TENANT_ID) ON DELETE CASCADE,
    PRIMARY KEY (UM_ID, UM_TENANT_ID)
);

CREATE TABLE IF NOT EXISTS IDN_SCIM_GROUP (
            ID INTEGER AUTO_INCREMENT,
            TENANT_ID INTEGER NOT NULL,
            ROLE_NAME VARCHAR(255) NOT NULL,
            ATTR_NAME VARCHAR(1024) NOT NULL,
            ATTR_VALUE VARCHAR(1024),
            PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS SP_APP (
        ID INTEGER NOT NULL AUTO_INCREMENT,
        TENANT_ID INTEGER NOT NULL,
        APP_NAME VARCHAR (255) NOT NULL ,
        USER_STORE VARCHAR (255) NOT NULL,
        USERNAME VARCHAR (255) NOT NULL ,
        DESCRIPTION VARCHAR (1024),
        ROLE_CLAIM VARCHAR (512),
        AUTH_TYPE VARCHAR (255) NOT NULL,
        PROVISIONING_USERSTORE_DOMAIN VARCHAR (512),
        IS_LOCAL_CLAIM_DIALECT CHAR(1) DEFAULT '1',
        IS_SEND_LOCAL_SUBJECT_ID CHAR(1) DEFAULT '0',
        IS_SEND_AUTH_LIST_OF_IDPS CHAR(1) DEFAULT '0',
        IS_USE_TENANT_DOMAIN_SUBJECT CHAR(1) DEFAULT '1',
        IS_USE_USER_DOMAIN_SUBJECT CHAR(1) DEFAULT '1',
        ENABLE_AUTHORIZATION CHAR(1) DEFAULT '0',
        SUBJECT_CLAIM_URI VARCHAR (512),
        IS_SAAS_APP CHAR(1) DEFAULT '0',
        IS_DUMB_MODE CHAR(1) DEFAULT '0',
        UUID CHAR(36),
        IMAGE_URL VARCHAR(1024),
        ACCESS_URL VARCHAR(1024),
        IS_DISCOVERABLE CHAR(1) DEFAULT '0',

        PRIMARY KEY (ID)
);

ALTER TABLE SP_APP ADD CONSTRAINT APPLICATION_NAME_CONSTRAINT UNIQUE(APP_NAME, TENANT_ID);
ALTER TABLE SP_APP ADD CONSTRAINT APPLICATION_UUID_CONSTRAINT UNIQUE(UUID);

CREATE TABLE IF NOT EXISTS API_RESOURCE (
    ID VARCHAR(255) NOT NULL PRIMARY KEY,
    CURSOR_KEY INTEGER NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(255) NOT NULL,
    IDENTIFIER VARCHAR(255) NOT NULL,
    TENANT_ID INT NOT NULL,
    DESCRIPTION VARCHAR(255),
    TYPE VARCHAR(255) NOT NULL,
    REQUIRES_AUTHORIZATION BOOLEAN NOT NULL,
    CONSTRAINT IDENTIFIER_UNIQUE UNIQUE (IDENTIFIER, TENANT_ID)
);

CREATE TABLE IF NOT EXISTS SCOPE (
    ID VARCHAR(255) NOT NULL PRIMARY KEY,
    CURSOR_KEY INTEGER NOT NULL AUTO_INCREMENT,
    API_ID VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DISPLAY_NAME VARCHAR(255) NOT NULL,
    TENANT_ID INT NOT NULL,
    DESCRIPTION VARCHAR(300),
    FOREIGN KEY (API_ID) REFERENCES API_RESOURCE(ID) ON DELETE CASCADE,
    CONSTRAINT SCOPE_UNIQUE UNIQUE (NAME, TENANT_ID)
);

CREATE TABLE IF NOT EXISTS APP_ROLE_ASSOCIATION (
    ROLE_ID VARCHAR(255) NOT NULL,
    APP_ID CHAR(36) NOT NULL,
    CONSTRAINT APP_ROLE_UNIQUE UNIQUE (ROLE_ID, APP_ID),
    FOREIGN KEY (APP_ID) REFERENCES SP_APP(UUID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ROLE_SCOPE (
    ROLE_ID VARCHAR(255) NOT NULL,
    SCOPE_NAME VARCHAR(255) NOT NULL,
    TENANT_ID INT NOT NULL,
    CONSTRAINT ROLE_SCOPE_UNIQUE UNIQUE (ROLE_ID, SCOPE_NAME, TENANT_ID),
    FOREIGN KEY (SCOPE_NAME, TENANT_ID) REFERENCES SCOPE(NAME, TENANT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS UM_IDP_GROUP_ROLE(
            ROLE_ID INTEGER NOT NULL,
            GROUP_ID VARCHAR(36) NOT NULL,
            UM_TENANT_ID INTEGER NOT NULL,
            UNIQUE (ROLE_ID, GROUP_ID, UM_TENANT_ID),
            FOREIGN KEY (ROLE_ID, UM_TENANT_ID) REFERENCES UM_HYBRID_ROLE(UM_ID, UM_TENANT_ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS UM_SHARED_ROLE(
            SHARED_ROLE_ID INTEGER NOT NULL,
            MAIN_ROLE_ID INTEGER NOT NULL,
            SHARED_ROLE_TENANT_ID INTEGER NOT NULL,
            MAIN_ROLE_TENANT_ID INTEGER NOT NULL,
            UNIQUE (SHARED_ROLE_ID, MAIN_ROLE_ID),
            FOREIGN KEY (SHARED_ROLE_ID, SHARED_ROLE_TENANT_ID) REFERENCES UM_HYBRID_ROLE(UM_ID, UM_TENANT_ID) ON DELETE CASCADE,
            FOREIGN KEY (MAIN_ROLE_ID, MAIN_ROLE_TENANT_ID) REFERENCES UM_HYBRID_ROLE(UM_ID, UM_TENANT_ID) ON DELETE CASCADE
);